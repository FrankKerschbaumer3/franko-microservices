// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fetcher.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	fetcher.proto

It has these top-level messages:
	FetchReq
	FetchReply
	Issue
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchReq struct {
	RepoId string `protobuf:"bytes,1,opt,name=repoId" json:"repoId,omitempty"`
}

func (m *FetchReq) Reset()                    { *m = FetchReq{} }
func (m *FetchReq) String() string            { return proto.CompactTextString(m) }
func (*FetchReq) ProtoMessage()               {}
func (*FetchReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchReq) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

type FetchReply struct {
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues" json:"issues,omitempty"`
}

func (m *FetchReply) Reset()                    { *m = FetchReply{} }
func (m *FetchReply) String() string            { return proto.CompactTextString(m) }
func (*FetchReply) ProtoMessage()               {}
func (*FetchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchReply) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

type Issue struct {
	RepoId    string `protobuf:"bytes,1,opt,name=repoId" json:"repoId,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Issue) Reset()                    { *m = Issue{} }
func (m *Issue) String() string            { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()               {}
func (*Issue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Issue) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Issue) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*FetchReq)(nil), "main.FetchReq")
	proto.RegisterType((*FetchReply)(nil), "main.FetchReply")
	proto.RegisterType((*Issue)(nil), "main.Issue")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IssueFetcher service

type IssueFetcherClient interface {
	FetchIssues(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchReply, error)
}

type issueFetcherClient struct {
	cc *grpc.ClientConn
}

func NewIssueFetcherClient(cc *grpc.ClientConn) IssueFetcherClient {
	return &issueFetcherClient{cc}
}

func (c *issueFetcherClient) FetchIssues(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchReply, error) {
	out := new(FetchReply)
	err := grpc.Invoke(ctx, "/main.IssueFetcher/FetchIssues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IssueFetcher service

type IssueFetcherServer interface {
	FetchIssues(context.Context, *FetchReq) (*FetchReply, error)
}

func RegisterIssueFetcherServer(s *grpc.Server, srv IssueFetcherServer) {
	s.RegisterService(&_IssueFetcher_serviceDesc, srv)
}

func _IssueFetcher_FetchIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueFetcherServer).FetchIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IssueFetcher/FetchIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueFetcherServer).FetchIssues(ctx, req.(*FetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssueFetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.IssueFetcher",
	HandlerType: (*IssueFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchIssues",
			Handler:    _IssueFetcher_FetchIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fetcher.proto",
}

func init() { proto.RegisterFile("fetcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0xce, 0x82, 0x30,
	0x14, 0x86, 0x3f, 0x3e, 0x7e, 0x22, 0x07, 0x35, 0xa6, 0x31, 0xa6, 0x31, 0x0e, 0xa4, 0x2e, 0x4c,
	0x24, 0xe0, 0x15, 0xb8, 0x90, 0xb0, 0x72, 0x07, 0xa8, 0x35, 0x36, 0x82, 0x54, 0x7a, 0x18, 0xb8,
	0x7b, 0xd3, 0x16, 0x63, 0x1c, 0xdc, 0xfa, 0x3e, 0xa7, 0x79, 0xda, 0xf7, 0xc0, 0xe2, 0xca, 0xf1,
	0x7c, 0xe3, 0x7d, 0x2a, 0xfb, 0x0e, 0x3b, 0xe2, 0xb5, 0xb5, 0x78, 0x30, 0x06, 0xb3, 0x42, 0xe3,
	0x8a, 0x3f, 0xc9, 0x06, 0x82, 0x9e, 0xcb, 0xae, 0xbc, 0x50, 0x27, 0x76, 0x92, 0xb0, 0x9a, 0x12,
	0xcb, 0x00, 0xa6, 0x3b, 0xb2, 0x19, 0xc9, 0x1e, 0x02, 0xa1, 0xd4, 0xc0, 0x15, 0x75, 0x62, 0x37,
	0x89, 0xf2, 0x28, 0xd5, 0xa2, 0xb4, 0xd4, 0xac, 0x9a, 0x46, 0xec, 0x0e, 0xbe, 0x01, 0xbf, 0x9c,
	0x64, 0x0d, 0x3e, 0x0a, 0x6c, 0x38, 0xfd, 0x37, 0xd8, 0x06, 0xb2, 0x83, 0x10, 0x45, 0xcb, 0x15,
	0xd6, 0xad, 0xa4, 0xae, 0x99, 0x7c, 0x80, 0x76, 0x29, 0xac, 0x71, 0x50, 0xd4, 0xb3, 0x2e, 0x9b,
	0xf2, 0x23, 0xcc, 0xcd, 0x63, 0x85, 0xed, 0x47, 0x32, 0x88, 0xcc, 0xd1, 0x40, 0x45, 0x96, 0xf6,
	0x83, 0xef, 0x9a, 0xdb, 0xd5, 0x57, 0x96, 0xcd, 0xc8, 0xfe, 0x4e, 0x81, 0xd9, 0xc9, 0xe1, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xf0, 0xfa, 0x64, 0x36, 0x24, 0x01, 0x00, 0x00,
}
